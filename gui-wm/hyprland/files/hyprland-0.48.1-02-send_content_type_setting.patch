From bf3211b5e648195891dbdff7b236d6b861c028f9 Mon Sep 17 00:00:00 2001
From: UjinT34 <ujint34@mail.ru>
Date: Sat, 5 Apr 2025 15:56:41 +0300
Subject: [PATCH] render:send_content_type setting

---
 src/config/ConfigDescriptions.hpp |  6 ++++++
 src/config/ConfigManager.cpp      |  1 +
 src/render/Renderer.cpp           | 13 ++++++++-----
 3 files changed, 15 insertions(+), 5 deletions(-)

diff --git a/src/config/ConfigDescriptions.hpp b/src/config/ConfigDescriptions.hpp
index e72669409bc..c363603be1a 100644
--- a/src/config/ConfigDescriptions.hpp
+++ b/src/config/ConfigDescriptions.hpp
@@ -1420,6 +1420,12 @@ inline static const std::vector<SConfigOptionDescription> CONFIG_OPTIONS = {
         .type        = CONFIG_OPTION_BOOL,
         .data        = SConfigOptionDescription::SBoolData{true},
     },
+    SConfigOptionDescription{
+        .value       = "render:send_content_type",
+        .description = "Report content type to allow monitor profile autoswitch (may result in a black screen during the switch)",
+        .type        = CONFIG_OPTION_BOOL,
+        .data        = SConfigOptionDescription::SBoolData{true},
+    },
 
     /*
      * cursor:
diff --git a/src/config/ConfigManager.cpp b/src/config/ConfigManager.cpp
index 0d12e29c5e2..ccb5e6adfc3 100644
--- a/src/config/ConfigManager.cpp
+++ b/src/config/ConfigManager.cpp
@@ -700,6 +700,7 @@ CConfigManager::CConfigManager() {
     registerConfigVar("render:ctm_animation", Hyprlang::INT{2});
     registerConfigVar("render:cm_fs_passthrough", Hyprlang::INT{2});
     registerConfigVar("render:cm_enabled", Hyprlang::INT{1});
+    registerConfigVar("render:send_content_type", Hyprlang::INT{1});
 
     registerConfigVar("ecosystem:no_update_news", Hyprlang::INT{0});
     registerConfigVar("ecosystem:no_donation_nag", Hyprlang::INT{0});
diff --git a/src/render/Renderer.cpp b/src/render/Renderer.cpp
index dca76f63909..8158f42b50f 100644
--- a/src/render/Renderer.cpp
+++ b/src/render/Renderer.cpp
@@ -1464,6 +1464,7 @@ static hdr_output_metadata       createHDRMetadata(SImageDescription settings, A
 }
 
 bool CHyprRenderer::commitPendingAndDoExplicitSync(PHLMONITOR pMonitor) {
+    static auto PCT   = CConfigValue<Hyprlang::INT>("render:send_content_type");
     static auto PPASS = CConfigValue<Hyprlang::INT>("render:cm_fs_passthrough");
     const bool  PHDR  = pMonitor->imageDescription.transferFunction == CM_TRANSFER_FUNCTION_ST2084_PQ;
 
@@ -1527,11 +1528,13 @@ bool CHyprRenderer::commitPendingAndDoExplicitSync(PHLMONITOR pMonitor) {
         }
     }
 
-    if (pMonitor->activeWorkspace && pMonitor->activeWorkspace->m_bHasFullscreenWindow && pMonitor->activeWorkspace->m_efFullscreenMode == FSMODE_FULLSCREEN) {
-        const auto WINDOW = pMonitor->activeWorkspace->getFullscreenWindow();
-        pMonitor->output->state->setContentType(NContentType::toDRM(WINDOW->getContentType()));
-    } else
-        pMonitor->output->state->setContentType(NContentType::toDRM(CONTENT_TYPE_NONE));
+    if (*PCT) {
+        if (pMonitor->activeWorkspace && pMonitor->activeWorkspace->m_bHasFullscreenWindow && pMonitor->activeWorkspace->m_efFullscreenMode == FSMODE_FULLSCREEN) {
+            const auto WINDOW = pMonitor->activeWorkspace->getFullscreenWindow();
+            pMonitor->output->state->setContentType(NContentType::toDRM(WINDOW->getContentType()));
+        } else
+            pMonitor->output->state->setContentType(NContentType::toDRM(CONTENT_TYPE_NONE));
+    }
 
     if (pMonitor->ctmUpdated) {
         pMonitor->ctmUpdated = false;
