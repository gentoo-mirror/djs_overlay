diff --color -urN vcmi-1.5.7/vcmiqt/CMakeLists.txt vcmi/vcmiqt/CMakeLists.txt
--- vcmi-1.5.7/vcmiqt/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ vcmi/vcmiqt/CMakeLists.txt	2024-12-19 15:00:23.006152401 +0100
@@ -0,0 +1,46 @@
+set(vcmiqt_SRCS
+		StdInc.cpp
+
+		jsonutils.cpp
+		launcherdirs.cpp
+)
+
+set(vcmiqt_HEADERS
+		StdInc.h
+
+		jsonutils.h
+		launcherdirs.h
+		convpathqstring.h
+		vcmiqt.h
+)
+
+assign_source_group(${vcmiqt_SRCS} ${vcmiqt_HEADERS})
+
+if(ENABLE_STATIC_LIBS OR NOT (ENABLE_EDITOR AND ENABLE_LAUNCHER))
+	add_library(vcmiqt STATIC ${vcmiqt_SRCS} ${vcmiqt_HEADERS})
+	target_compile_definitions(vcmiqt PRIVATE VCMIQT_STATIC)
+else()
+	add_library(vcmiqt SHARED ${vcmiqt_SRCS} ${vcmiqt_HEADERS})
+	target_compile_definitions(vcmiqt PRIVATE VCMIQT_SHARED)
+endif()
+
+if(WIN32)
+	set_target_properties(vcmiqt
+		PROPERTIES
+			OUTPUT_NAME "VCMI_vcmiqt"
+			PROJECT_LABEL "VCMI_vcmiqt"
+	)
+endif()
+
+target_link_libraries(vcmiqt vcmi Qt${QT_VERSION_MAJOR}::Core)
+
+target_include_directories(vcmiqt PUBLIC
+	${CMAKE_CURRENT_SOURCE_DIR}
+)
+
+if(NOT ENABLE_STATIC_LIBS OR (ENABLE_EDITOR AND ENABLE_LAUNCHER))
+	install(TARGETS vcmiqt RUNTIME DESTINATION ${LIB_DIR} LIBRARY DESTINATION ${LIB_DIR})
+endif()
+
+vcmi_set_output_dir(vcmiqt "")
+enable_pch(vcmiqt)
diff --color -urN vcmi-1.5.7/vcmiqt/convpathqstring.h vcmi/vcmiqt/convpathqstring.h
--- vcmi-1.5.7/vcmiqt/convpathqstring.h	1970-01-01 01:00:00.000000000 +0100
+++ vcmi/vcmiqt/convpathqstring.h	2024-12-19 15:00:23.007152442 +0100
@@ -0,0 +1,29 @@
+/*
+ * convpathqstring.h, part of VCMI engine
+ *
+ * Authors: listed in file AUTHORS in main folder
+ *
+ * License: GNU General Public License v2.0 or later
+ * Full text of license available in license.txt file, in main folder
+ *
+ */
+
+#pragma once
+
+inline QString pathToQString(const boost::filesystem::path & path)
+{
+#ifdef VCMI_WINDOWS
+    return QString::fromStdWString(path.wstring());
+#else
+    return QString::fromStdString(path.string());
+#endif
+}
+
+inline boost::filesystem::path qstringToPath(const QString & path)
+{
+#ifdef VCMI_WINDOWS
+    return boost::filesystem::path(path.toStdWString());
+#else
+    return boost::filesystem::path(path.toUtf8().data());
+#endif
+}
diff --color -urN vcmi-1.5.7/vcmiqt/jsonutils.cpp vcmi/vcmiqt/jsonutils.cpp
--- vcmi-1.5.7/vcmiqt/jsonutils.cpp	1970-01-01 01:00:00.000000000 +0100
+++ vcmi/vcmiqt/jsonutils.cpp	2024-12-19 15:00:23.007152442 +0100
@@ -0,0 +1,124 @@
+/*
+ * jsonutils.cpp, part of VCMI engine
+ *
+ * Authors: listed in file AUTHORS in main folder
+ *
+ * License: GNU General Public License v2.0 or later
+ * Full text of license available in license.txt file, in main folder
+ *
+ */
+#include "StdInc.h"
+#include "jsonutils.h"
+
+#include "../lib/json/JsonNode.h"
+
+static QVariantMap JsonToMap(const JsonMap & json)
+{
+	QVariantMap map;
+	for(auto & entry : json)
+	{
+		map.insert(QString::fromStdString(entry.first), JsonUtils::toVariant(entry.second));
+	}
+	return map;
+}
+
+static QVariantList JsonToList(const JsonVector & json)
+{
+	QVariantList list;
+	for(auto & entry : json)
+	{
+		list.push_back(JsonUtils::toVariant(entry));
+	}
+	return list;
+}
+
+static JsonVector VariantToList(QVariantList variant)
+{
+	JsonVector vector;
+	for(auto & entry : variant)
+	{
+		vector.push_back(JsonUtils::toJson(entry));
+	}
+	return vector;
+}
+
+static JsonMap VariantToMap(QVariantMap variant)
+{
+	JsonMap map;
+	for(auto & entry : variant.toStdMap())
+	{
+		map[entry.first.toUtf8().data()] = JsonUtils::toJson(entry.second);
+	}
+	return map;
+}
+
+VCMI_LIB_NAMESPACE_BEGIN
+
+namespace JsonUtils
+{
+
+QVariant toVariant(const JsonNode & node)
+{
+	switch(node.getType())
+	{
+	case JsonNode::JsonType::DATA_NULL:
+		return QVariant();
+	case JsonNode::JsonType::DATA_BOOL:
+		return QVariant(node.Bool());
+	case JsonNode::JsonType::DATA_FLOAT:
+		return QVariant(node.Float());
+	case JsonNode::JsonType::DATA_INTEGER:
+		return QVariant{static_cast<qlonglong>(node.Integer())};
+	case JsonNode::JsonType::DATA_STRING:
+		return QVariant(QString::fromStdString(node.String()));
+	case JsonNode::JsonType::DATA_VECTOR:
+		return JsonToList(node.Vector());
+	case JsonNode::JsonType::DATA_STRUCT:
+		return JsonToMap(node.Struct());
+	}
+	return QVariant();
+}
+
+JsonNode jsonFromFile(QString filename)
+{
+	QFile file(filename);
+	if(!file.open(QFile::ReadOnly))
+	{
+		logGlobal->error("Failed to open file %s. Reason: %s", qUtf8Printable(filename), qUtf8Printable(file.errorString()));
+		return {};
+	}
+
+	const auto data = file.readAll();
+	JsonNode node(reinterpret_cast<const std::byte*>(data.data()), data.size(), filename.toStdString());
+	return node;
+}
+
+JsonNode toJson(QVariant object)
+{
+	JsonNode ret;
+
+	if(object.userType() == QMetaType::QString)
+		ret.String() = object.toString().toUtf8().data();
+	else if(object.userType() == QMetaType::Bool)
+		ret.Bool() = object.toBool();
+	else if(object.canConvert<QVariantMap>())
+		ret.Struct() = VariantToMap(object.toMap());
+	else if(object.canConvert<QVariantList>())
+		ret.Vector() = VariantToList(object.toList());
+	else if(object.canConvert<int>())
+		ret.Integer() = object.toInt();
+	else if(object.canConvert<double>())
+		ret.Float() = object.toFloat();
+
+	return ret;
+}
+
+void jsonToFile(QString filename, const JsonNode & object)
+{
+	std::fstream file(qstringToPath(filename).c_str(), std::ios::out | std::ios_base::binary);
+	file << object.toCompactString();
+}
+
+}
+
+VCMI_LIB_NAMESPACE_END
diff --color -urN vcmi-1.5.7/vcmiqt/jsonutils.h vcmi/vcmiqt/jsonutils.h
--- vcmi-1.5.7/vcmiqt/jsonutils.h	1970-01-01 01:00:00.000000000 +0100
+++ vcmi/vcmiqt/jsonutils.h	2024-12-19 15:00:23.007152442 +0100
@@ -0,0 +1,29 @@
+/*
+ * jsonutils.h, part of VCMI engine
+ *
+ * Authors: listed in file AUTHORS in main folder
+ *
+ * License: GNU General Public License v2.0 or later
+ * Full text of license available in license.txt file, in main folder
+ *
+ */
+#pragma once
+
+#include "vcmiqt.h"
+
+#include <QVariant>
+
+VCMI_LIB_NAMESPACE_BEGIN
+
+class JsonNode;
+
+namespace JsonUtils
+{
+VCMIQT_LINKAGE QVariant toVariant(const JsonNode & node);
+VCMIQT_LINKAGE JsonNode jsonFromFile(QString filename);
+
+VCMIQT_LINKAGE JsonNode toJson(QVariant object);
+VCMIQT_LINKAGE void jsonToFile(QString filename, const JsonNode & object);
+}
+
+VCMI_LIB_NAMESPACE_END
diff --color -urN vcmi-1.5.7/vcmiqt/launcherdirs.cpp vcmi/vcmiqt/launcherdirs.cpp
--- vcmi-1.5.7/vcmiqt/launcherdirs.cpp	1970-01-01 01:00:00.000000000 +0100
+++ vcmi/vcmiqt/launcherdirs.cpp	2024-12-19 15:00:23.007152442 +0100
@@ -0,0 +1,37 @@
+/*
+ * launcherdirs.cpp, part of VCMI engine
+ *
+ * Authors: listed in file AUTHORS in main folder
+ *
+ * License: GNU General Public License v2.0 or later
+ * Full text of license available in license.txt file, in main folder
+ *
+ */
+#include "StdInc.h"
+#include "launcherdirs.h"
+
+#include "../lib/VCMIDirs.h"
+
+namespace CLauncherDirs
+{
+void prepare()
+{
+	for(auto path : {downloadsPath(), modsPath(), mapsPath()})
+		QDir{}.mkdir(path);
+}
+
+QString downloadsPath()
+{
+	return pathToQString(VCMIDirs::get().userCachePath() / "downloads");
+}
+
+QString modsPath()
+{
+	return pathToQString(VCMIDirs::get().userDataPath() / "Mods");
+}
+
+QString mapsPath()
+{
+	return pathToQString(VCMIDirs::get().userDataPath() / "Maps");
+}
+}
diff --color -urN vcmi-1.5.7/vcmiqt/launcherdirs.h vcmi/vcmiqt/launcherdirs.h
--- vcmi-1.5.7/vcmiqt/launcherdirs.h	1970-01-01 01:00:00.000000000 +0100
+++ vcmi/vcmiqt/launcherdirs.h	2024-12-19 15:00:23.007152442 +0100
@@ -0,0 +1,22 @@
+/*
+ * launcherdirs.h, part of VCMI engine
+ *
+ * Authors: listed in file AUTHORS in main folder
+ *
+ * License: GNU General Public License v2.0 or later
+ * Full text of license available in license.txt file, in main folder
+ *
+ */
+#pragma once
+
+#include "vcmiqt.h"
+
+/// similar to lib/VCMIDirs, controls where all launcher-related data will be stored
+namespace CLauncherDirs
+{
+	VCMIQT_LINKAGE void prepare();
+
+	VCMIQT_LINKAGE QString downloadsPath();
+	VCMIQT_LINKAGE QString modsPath();
+	VCMIQT_LINKAGE QString mapsPath();
+}
diff --color -urN vcmi-1.5.7/vcmiqt/StdInc.cpp vcmi/vcmiqt/StdInc.cpp
--- vcmi-1.5.7/vcmiqt/StdInc.cpp	1970-01-01 01:00:00.000000000 +0100
+++ vcmi/vcmiqt/StdInc.cpp	2024-12-19 15:00:23.006152401 +0100
@@ -0,0 +1,12 @@
+/*
+ * StdInc.cpp, part of VCMI engine
+ *
+ * Authors: listed in file AUTHORS in main folder
+ *
+ * License: GNU General Public License v2.0 or later
+ * Full text of license available in license.txt file, in main folder
+ *
+ */
+// Creates the precompiled header
+#include "StdInc.h"
+
diff --color -urN vcmi-1.5.7/vcmiqt/StdInc.h vcmi/vcmiqt/StdInc.h
--- vcmi-1.5.7/vcmiqt/StdInc.h	1970-01-01 01:00:00.000000000 +0100
+++ vcmi/vcmiqt/StdInc.h	2024-12-19 15:00:23.006152401 +0100
@@ -0,0 +1,20 @@
+/*
+ * StdInc.h, part of VCMI engine
+ *
+ * Authors: listed in file AUTHORS in main folder
+ *
+ * License: GNU General Public License v2.0 or later
+ * Full text of license available in license.txt file, in main folder
+ *
+ */
+#pragma once
+
+#include "../Global.h"
+
+#include <QDir>
+#include <QFile>
+#include <QString>
+
+#include "convpathqstring.h"
+
+VCMI_LIB_USING_NAMESPACE
diff --color -urN vcmi-1.5.7/vcmiqt/vcmiqt.h vcmi/vcmiqt/vcmiqt.h
--- vcmi-1.5.7/vcmiqt/vcmiqt.h	1970-01-01 01:00:00.000000000 +0100
+++ vcmi/vcmiqt/vcmiqt.h	2024-12-19 15:00:23.007152442 +0100
@@ -0,0 +1,19 @@
+/*
+ * vcmiqt.h, part of VCMI engine
+ *
+ * Authors: listed in file AUTHORS in main folder
+ *
+ * License: GNU General Public License v2.0 or later
+ * Full text of license available in license.txt file, in main folder
+ *
+ */
+
+#include <QtCore/QtGlobal>
+
+#ifdef VCMIQT_STATIC
+# define VCMIQT_LINKAGE
+#elif defined(VCMIQT_SHARED)
+#  define VCMIQT_LINKAGE Q_DECL_EXPORT
+#else
+#  define VCMIQT_LINKAGE Q_DECL_IMPORT
+#endif
